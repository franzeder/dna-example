getSrcDirectory()
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
getwd()
source("script_dna_10-workspace.R")
get(wd)
getwd()
?dna_connection
conn <- dna_connection(dna_example_UK-IraqWar2003, verbose = FALSE)
conn <- dna_connection(dna_example_UKIraqWar2003, verbose = FALSE)
conn <- dna_connection(dna_example_UKIraqWar2003.dna, verbose = FALSE)
?dna_connection
conn <- dna_connection("dna_example_UKIraqWar2003", verbose = FALSE)
conn <- dna_connection("dna_example_UKIraqWar2003.dna", verbose = FALSE)
dna_init()
conn <- dna_connection("dna_example_UKIraqWar2003.dna", verbose = FALSE)
source("script_dna_010-workspace.R")
p_load(statnet)
?dna_network
affil <- dna_network(conn,
networkType = "twomode",
statementType = "DNA Statement",
variable1 = "person",
variable2 = "concept",
qualifier = "agreement",
qualifierAggregation = "subtract",
normalization = "prominence",
duplicates = "including",
verbose = TRUE)
affil <- dna_network(conn,
networkType = "twomode",
statementType = "DNA Statement",
variable1 = "person",
variable2 = "concept",
qualifier = "agreement",
qualifierAggregation = "subtract",
normalization = "prominence",
duplicates = "include",
verbose = TRUE)
nw <- network(affil, bipartite = TRUE)
plot(nw)
colors <- as.character(t(affil))
colors[colors == "3"] <- "deepskyblue"
colors[colors == "2"] <- "indianred"
colors[colors == "1"] <- "#31a354"
colors <- colors[colors != "0"]
set.edge.attribute(nw, "color", colors)
plot(nw,
edge.col = get.edge.attribute(nw, "color"),
vertex.col = c(rep("white", nrow(affil)),
rep("black", ncol(affil))),
displaylabels = TRUE,
label.cex = 0.5
)
colors <- as.character(t(affil))
colors[colors < 0] <- "indianred"
colors[colors > 0] <- "#31a354"
colors <- colors[colors != "0"]
set.edge.attribute(nw, "color", colors)
plot(nw,
edge.col = get.edge.attribute(nw, "color"),
vertex.col = c(rep("white", nrow(affil)),
rep("black", ncol(affil))),
displaylabels = TRUE,
label.cex = 0.5
)
colors <- as.character(t(affil))
range(colors)
t(affil)
colors[colors < 0] <- "red"
colors[colors > 0] <- "#31a354"
colors <- colors[colors != "0"]
set.edge.attribute(nw, "color", colors)
plot(nw,
edge.col = get.edge.attribute(nw, "color"),
vertex.col = c(rep("white", nrow(affil)),
rep("black", ncol(affil))),
displaylabels = TRUE,
label.cex = 0.5
)
colors <- as.character(t(affil))
colors[colors < 0] <- "red"
colors[colors > 0] <- "#31a354"
colors
colors <- as.character(t(affil))
colors[colors < 0] <- "red"
colors
colors[colors > 0] <- "#31a354"
colors
range(colors)
colors[colors < 0] <- "red"
range(colors)
colors < 0
colors > 0
colors <- as.character(t(affil))
colors < 0
colors <- colors[colors != "0"]
colors[colors < 0] <- "red"
colors[colors > 0] <- "#31a354"
range(colors)
colors <- as.character(t(affil))
colors <- colors[colors != "0"]
colors[colors < 0] <- "red"
colors[colors != "red"] <- "#31a354"
colors <- as.character(t(affil))
colors <- colors[colors != "0"]
colors[colors < 0] <- "red"
colors[colors != "red"] <- "#31a354"
range(colors)
set.edge.attribute(nw, "color", colors)
plot(nw,
edge.col = get.edge.attribute(nw, "color"),
vertex.col = c(rep("white", nrow(affil)),
rep("black", ncol(affil))),
displaylabels = TRUE,
label.cex = 0.5
)
?dna_network
# Overall affiliation network
## person x concept, substract-method and normalization, including duplicates
affil_2002 <- dna_network(conn,
networkType = "twomode",
statementType = "DNA Statement",
variable1 = "person",
variable2 = "concept",
qualifier = "agreement",
qualifierAggregation = "subtract",
normalization = "prominence",
duplicates = "include",
end.date = "31.12.2002",
verbose = TRUE)
# Overall affiliation network
## person x concept, substract-method and normalization, including duplicates
affil_2002 <- dna_network(conn,
networkType = "twomode",
statementType = "DNA Statement",
variable1 = "person",
variable2 = "concept",
qualifier = "agreement",
qualifierAggregation = "subtract",
normalization = "prominence",
duplicates = "include",
stop.date = "31.12.2002",
verbose = TRUE)
nw <- network(affil_2002, bipartite = TRUE)
colors <- as.character(t(affil_2002))
colors <- colors[colors != "0"]
colors[colors < 0] <- "red"
colors[colors != "red"] <- "#31a354"
set.edge.attribute(nw, "color", colors)
plot(nw,
edge.col = get.edge.attribute(nw, "color"),
vertex.col = c(rep("white", nrow(affil_2002)),
rep("black", ncol(affil_2002))),
displaylabels = TRUE,
label.cex = 0.5
)
# Affiliation network in 2003
## person x concept, substract-method and normalization, including duplicates
affil_2003 <- dna_network(conn,
networkType = "twomode",
statementType = "DNA Statement",
variable1 = "person",
variable2 = "concept",
qualifier = "agreement",
qualifierAggregation = "subtract",
normalization = "prominence",
duplicates = "include",
start.date = "01.01.2003",
verbose = TRUE)
nw <- network(affil_2003, bipartite = TRUE)
colors <- as.character(t(affil_2003))
colors <- colors[colors != "0"]
colors[colors < 0] <- "red"
colors[colors != "red"] <- "#31a354"
set.edge.attribute(nw, "color", colors)
plot(nw,
edge.col = get.edge.attribute(nw, "color"),
vertex.col = c(rep("white", nrow(affil_2003)),
rep("black", ncol(affil_2003))),
displaylabels = TRUE,
label.cex = 0.5
)
?network
dna_plotNetwork()
dna_plotNetwork(nw, layout = "fr")
dna_plotNetwork(affil_2003, layout = "fr")
congruence <- dna_network(conn,
networkType = "onemode",
statementType = "DNA Statement",
variable1 = "person",
variable2 = "concept",
qualifier = "agreement",
qualifierAggregation = "congruence",
duplicates = "inlcude")
congruence <- dna_network(conn,
networkType = "onemode",
statementType = "DNA Statement",
variable1 = "person",
variable2 = "concept",
qualifier = "agreement",
qualifierAggregation = "congruence",
duplicates = "include")
nw <- network(congruence)
plot(nw,
edge.lwd = congruence^2,
displaylabels = TRUE,
label.cex = 0.5,
usearrows = FALSE,
edge.col = "gray"
)
# Overall congruence network
## person x concept, congruence-method, including duplicates
congruence <- dna_network(conn,
networkType = "onemode",
statementType = "DNA Statement",
variable1 = "concept",
variable2 = "person",
qualifier = "agreement",
qualifierAggregation = "congruence",
duplicates = "include")
nw <- network(congruence)
plot(nw,
edge.lwd = congruence^2,
displaylabels = TRUE,
label.cex = 0.5,
usearrows = FALSE,
edge.col = "gray"
)
plot(nw,
displaylabels = TRUE,
label.cex = 0.5,
usearrows = FALSE,
edge.col = "gray"
)
t(congruence)
# Overall congruence network
## person x concept, congruence-method, including duplicates
congruence <- dna_network(conn,
networkType = "onemode",
statementType = "DNA Statement",
variable1 = "person",
variable2 = "concept",
qualifier = "agreement",
qualifierAggregation = "congruence",
duplicates = "include")
nw <- network(congruence)
plot(nw,
displaylabels = TRUE,
label.cex = 0.5,
usearrows = FALSE,
edge.col = "gray"
)
# 2002 congruence network
## person x concept, congruence-method, including duplicates
congruence_2002 <- dna_network(conn,
networkType = "onemode",
statementType = "DNA Statement",
variable1 = "person",
variable2 = "concept",
qualifier = "agreement",
qualifierAggregation = "congruence",
stop.date = "31.12.2002",
duplicates = "include")
nw <- network(congruence_2002)
plot(nw,
displaylabels = TRUE,
label.cex = 0.5,
usearrows = FALSE,
edge.col = "gray"
)
# 2003 congruence network
## person x concept, congruence-method, including duplicates
congruence_2003 <- dna_network(conn,
networkType = "onemode",
statementType = "DNA Statement",
variable1 = "person",
variable2 = "concept",
qualifier = "agreement",
qualifierAggregation = "congruence",
start.date = "01.01.2003",
duplicates = "include")
nw <- network(congruence_2003)
plot(nw,
displaylabels = TRUE,
label.cex = 0.5,
usearrows = FALSE,
edge.col = "gray"
)
dna_barplot(conn, of = "concept", fontSize = 10)
?dna_barplot
# barplot of concept agreement/disagreement
dna_barplot(conn, of = "person", fontSize = 10)
# barplot of concept agreement/disagreement
dna_barplot(conn, of = "organization", fontSize = 10)
# barplot of concept agreement/disagreement
dna_barplot(conn, of = "concept", fontSize = 10)
# barplot of concept agreement/disagreement
dna_barplot(conn,
of = "concept",
fontSize = 10,
stop.date = "31.12.2002")
dna_barplot(conn,
of = "concept",
fontSize = 10,
start.date = "01.01.2003")
dna_barplot(conn,
of = "person",
fontSize = 10,
excludeValues = list("concep" != "war"))
dna_barplot(conn,
of = "organization",
fontSize = 10,
excludeValues = list("concept" != "war"))
dna_barplot(conn,
of = "organization",
fontSize = 10,
excludeValues = list("concept" = "war"))
dna_barplot(conn,
of = "organization",
fontSize = 10,
excludeValues = list("concept" is.not("war")))
dna_barplot(conn,
of = "organization",
fontSize = 10,
excludeValues = list("concept" != "war"))
dna_barplot(conn,
of = "organization",
fontSize = 10,
excludeValues = list("concept" != c("war")))
list("concept")
dna_barplot(conn,
of = "organization",
fontSize = 10,
excludeValues = list("concept" = c("war")))
?excludeValues
??excludeValues
str(conn)
conn$dna_connection@jclass
# barplot of concept agreement/disagreement
dna_barplot(conn,
of = "concept",
fontSize = 10,
stop.date = "31.12.2002")
dna_barplot(conn,
of = "concept",
fontSize = 10,
start.date = "01.01.2003")
dna_barplot(conn,
of = "organization",
fontSize = 10,
excludeValues = list("concept" = c("22 - war")))
dna_barplot(conn,
of = "organization",
fontSize = 10)
dna_barplot(conn,
of = "organization",
fontSize = 10),
excludeValues = list("concept" != c("22 - war")))
dna_barplot(conn,
of = "organization",
fontSize = 10,
excludeValues = list("concept" != c("22 - war")))
# barplot of concept agreement/disagreement
dna_barplot(conn,
of = "concept",
fontSize = 10,
stop.date = "31.12.2002")
dna_barplot(conn,
of = "organization",
fontSize = 10,
excludeValues = list("concept" = c("22 - war")))
clust <- dna_cluster(conn, duplicates = "include")
clust <- dna_cluster(conn)
dna_getAttributes(conn)
dna_getVariables()
dna_getVariables(conn)
dna_getVariables()
?dna_getVariables
dna_getVariables(conn, 1)
dna_getVariables(conn, 2)
dna_getVariables(conn, 3)
?dna_getAttributes
dna_getAttributes(statementType = 1,
variable = "organization")
dna_getStatements(conn, "concept")
dna_getStatements(conn, 1)
dna_getStatements(conn, 2)
dna_getStatements(conn, concept)
dna_getStatements(conn, "concept")
concepts <- dna_getStatements(conn, 1)
concepts <- unique(concepts$concept)
concepts_war <- concepts != "22 - war"
concepts_war
concepts <- dna_getStatements(conn, 1)
concepts <- unique(concepts$concept)
concepts_war <- concepts[-"22 - war"]
concepts_war <- concepts[!"22 - war"]
concepts_war <- concepts[!="22 - war"]
?pmatch
concepts_war <- concepts[-pmatch("22 - war")]
concepts <- dna_getStatements(conn, 1)
concepts <- unique(concepts$concept)
concepts[-pmatch("22 - war")]
concepts_war <- concepts[-c("22 - war")]
concepts
concepts_war <- concepts[-9]
concepts_war
dna_barplot(conn,
of = "organization",
fontSize = 10,
excludeValues = list("concept" = concepts_war))
clust <- dna_cluster(conn)
help("dna_cluster")
clust.l <- dna_cluster(conn)
clust
clust <- dna_cluster(conn, duplicates = "include")
plot(clust)
dna_plotDendro(clust)
clust <- dna_cluster(conn,
duplicates = "acrossrange",
attribute1 = "type",
cutree.k = 2)
dna_plotDendro(clust, shape = "diagonal", colors = "brewer", rectangles = "red")
clust <- dna_cluster(conn,
variable1 = "person",
attribute1 = "value",
attribute2 = "type",
cutree.k = 2)
# Now the first attribute contains just the names of the persons
clust$attribute1
# You can change the legend by changing the colors attribute
attr(clust, "colors") <- c("Gender", "Organization Type")
# Then you are ready to plot
library("ggplot2")
# You can change the legend by changing the colors attribute
attr(clust, "colors") <- c("Gender", "Organization Type")
# Then you are ready to plot
p_load("ggplot2")
dna_plotDendro(clust,
activity = TRUE,
shape = "diagonal",
truncate = 20,
leaf_colors = "attribute1",
colors = "brewer",
custom_colors = "Set1",
rectangles = "#e34a33",
leaf_ends = "attribute2",
ends_alpha = 0.8,
font_size = 9,
leaf_labels = "ticks") +
coord_flip()
dna_plotDendro(clust,
circular = TRUE,
leaf_colors = "attribute2",
leaf_labels = "nodes",
colors = "brewer",
custom_colors = "Set2",
theme = "void")
dna_plotDendro(clust,
circular = TRUE,
leaf_colors = "attribute1",
leaf_labels = "nodes",
colors = "brewer",
custom_colors = "Set2",
theme = "void")
dna_plotDendro(clust,
circular = TRUE,
leaf_colors = "attribute3",
leaf_labels = "nodes",
colors = "brewer",
custom_colors = "Set2",
theme = "void")
?dna_plotDendro
dna_plotDendro(clust,
circular = TRUE,
leaf_colors = "group",
leaf_labels = "nodes",
colors = "brewer",
custom_colors = "Set2",
theme = "void")
clust_walktrap <- dna_cluster(conn,
clust.method = "walktrap",
cutree.k = 2,
excludeValues = excludeConcept)
clust_walktrap <- dna_cluster(conn,
clust.method = "walktrap",
cutree.k = 2)
dna_plotDendro(clust_walktrap, show_legend = FALSE, truncate = 25)+
ggtitle("walktrap")
clust_centroid <- dna_cluster(conn,
clust.method = "centroid",
cutree.k = 2)
clust_edbe <- dna_cluster(conn,
clust.method = "edge_betweenness",
cutree.k = 2)
clust_leei <- dna_cluster(conn,
clust.method = "leading_eigen",
cutree.k = 2)
dend_centroid <- dna_plotDendro(clust_centroid, show_legend = FALSE, truncate = 25) +
ggtitle("centroid")
dend_edbe <- dna_plotDendro(clust_edbe, show_legend = FALSE, truncate = 25)+
ggtitle("edge_betweenness")
dna_plotDendro(clust_centroid, show_legend = FALSE, truncate = 25) +
ggtitle("centroid")
dna_plotDendro(clust_edbe, show_legend = FALSE, truncate = 25)+
ggtitle("edge_betweenness")
dna_plotDendro(clust_leei, show_legend = FALSE, truncate = 25)+
ggtitle("leading_eigen")
dna_plotDendro(clust_walktrap, show_legend = FALSE, truncate = 25)+
ggtitle("walktrap")
dna_plotDendro(clust_centroid, show_legend = FALSE, truncate = 25) +
ggtitle("centroid")
