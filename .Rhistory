pdf(file = "fig_network_congruence_2002.pdf",
width = 8,
height = 8)
plot(nw_2002,
edge.lwd = congruence_2002,
displaylabels = TRUE,
label.cex = 0.5,
usearrows = FALSE,
edge.col = "gray85",
#vertex.col = selection_person$color,
#label = selection_person$value
)
dev.off()
congruence_2003 <- dna_network(conn,
networkType = "onemode",
statementType = "DNA Statement",
variable1 = "person",
variable2 = "concept",
qualifier = "agreement",
qualifierAggregation = "congruence",
start.date = "01.01.2003",
duplicates = "document",
excludeValues = list(person = exclusion_person$value,
concept = exclusion_concept))
nw_2003 <- network(congruence_2003)
pdf(file = "fig_network_congruence_2003.pdf",
width = 8,
height = 8)
plot(nw_2003,
displaylabels = TRUE,
label.cex = 0.5,
usearrows = FALSE,
edge.col = "gray85",
#vertex.col = selection_person$color,
#label = selection_person$value
)
dev.off()
selection_person$color
congruence_2003 <- dna_network(conn,
networkType = "onemode",
statementType = "DNA Statement",
variable1 = "person",
variable2 = "concept",
qualifier = "agreement",
qualifierAggregation = "congruence",
start.date = "01.01.2003",
duplicates = "month",
excludeValues = list(person = exclusion_person$value,
concept = exclusion_concept))
nw_2003 <- network(congruence_2003)
pdf(file = "fig_network_congruence_2003.pdf",
width = 8,
height = 8)
plot(nw_2003,
displaylabels = TRUE,
label.cex = 0.5,
usearrows = FALSE,
edge.col = "gray85",
#vertex.col = selection_person$color,
#label = selection_person$value
)
dev.off()
nw_2003
congruence_2002 <- dna_network(conn,
networkType = "onemode",
statementType = "DNA Statement",
variable1 = "person",
variable2 = "concept",
qualifier = "agreement",
qualifierAggregation = "congruence",
stop.date = "01.01.2003",
duplicates = "week",
excludeValues = list(person = exclusion_person$value,
concept = exclusion_concept))
nw_2002 <- network(congruence_2002)
pdf(file = "fig_network_congruence_2002.pdf",
width = 8,
height = 8)
plot(nw_2002,
edge.lwd = congruence_2002,
displaylabels = TRUE,
label.cex = 0.5,
usearrows = FALSE,
edge.col = "gray85",
#vertex.col = selection_person$color,
#label = selection_person$value
)
dev.off()
congruence_2003 <- dna_network(conn,
networkType = "onemode",
statementType = "DNA Statement",
variable1 = "person",
variable2 = "concept",
qualifier = "agreement",
qualifierAggregation = "congruence",
start.date = "01.01.2003",
duplicates = "week",
excludeValues = list(person = exclusion_person$value,
concept = exclusion_concept))
nw_2003 <- network(congruence_2003)
pdf(file = "fig_network_congruence_2003.pdf",
width = 8,
height = 8)
plot(nw_2003,
displaylabels = TRUE,
label.cex = 0.5,
usearrows = FALSE,
edge.col = "gray85",
#vertex.col = selection_person$color,
#label = selection_person$value
)
dev.off()
concept
nw_2002
nw_2002$val
selection_person$value
t(nw_2002)
t(congruence_2002)
x <- t(congruence_2002)
x
View(x)
row(x)
row.names(x)
x <- t(congruence_2002)
row.names(x)
nw_2002
x <- selection_person %>% filter(value %in% x)
x <- selection_person %>% filter(value == x)
y <- selection_person %>% filter(value == x)
y <- selection_person %>% filter(value %in% x)
selection_person$value %in% x
x
x <- t(congruence_2002)
y <- selection_person %>% filter(value %in% row.names(x))
nw_2002 <- network(congruence_2002)
x <- t(congruence_2002)
y <- selection_person %>% filter(value %in% row.names(x))
pdf(file = "fig_network_congruence_2002.pdf",
width = 8,
height = 8)
plot(nw_2002,
edge.lwd = congruence_2002,
displaylabels = TRUE,
label.cex = 0.5,
usearrows = FALSE,
edge.col = "gray85",
vertex.col = y$color,
label = y$value
)
dev.off()
congruence_2003 <- dna_network(conn,
networkType = "onemode",
statementType = "DNA Statement",
variable1 = "person",
variable2 = "concept",
qualifier = "agreement",
qualifierAggregation = "congruence",
start.date = "01.01.2003",
duplicates = "week",
excludeValues = list(person = exclusion_person$value,
concept = exclusion_concept))
nw_2003 <- network(congruence_2003)
x <- t(congruence_2003)
y <- selection_person %>% filter(value %in% row.names(x))
pdf(file = "fig_network_congruence_2003.pdf",
width = 8,
height = 8)
plot(nw_2003,
displaylabels = TRUE,
label.cex = 0.5,
usearrows = FALSE,
edge.col = "gray85",
vertex.col = y$color,
label = y$value
)
dev.off()
selection_person <- person %>% filter(frequency >5)
selection_person$value
exclusion_person <- person %>% filter(frequency < 6)
congruence_2002 <- dna_network(conn,
networkType = "onemode",
statementType = "DNA Statement",
variable1 = "person",
variable2 = "concept",
qualifier = "agreement",
qualifierAggregation = "congruence",
stop.date = "01.01.2003",
duplicates = "week",
excludeValues = list(person = exclusion_person$value,
concept = exclusion_concept))
nw_2002 <- network(congruence_2002)
x <- t(congruence_2002)
y <- selection_person %>% filter(value %in% row.names(x))
pdf(file = "fig_network_congruence_2002.pdf",
width = 8,
height = 8)
plot(nw_2002,
edge.lwd = congruence_2002,
displaylabels = TRUE,
label.cex = 0.5,
usearrows = FALSE,
edge.col = "gray85",
vertex.col = y$color,
label = y$value
)
dev.off()
congruence_2003 <- dna_network(conn,
networkType = "onemode",
statementType = "DNA Statement",
variable1 = "person",
variable2 = "concept",
qualifier = "agreement",
qualifierAggregation = "congruence",
start.date = "01.01.2003",
duplicates = "week",
excludeValues = list(person = exclusion_person$value,
concept = exclusion_concept))
nw_2003 <- network(congruence_2003)
x <- t(congruence_2003)
y <- selection_person %>% filter(value %in% row.names(x))
pdf(file = "fig_network_congruence_2003.pdf",
width = 8,
height = 8)
plot(nw_2003,
displaylabels = TRUE,
label.cex = 0.5,
usearrows = FALSE,
edge.col = "gray85",
vertex.col = y$color,
label = y$value
)
dev.off()
nw_2003
x <- t(afill)
p_load(dplyr)
selection_person <- person %>% filter(frequency >9)
selection_person$value
exclusion_person <- person %>% filter(frequency < 10)
selection_concept <- c(1, 11, 12, 13)
concept$value[selection_concept]
exclusion_concept <- concept$value[-selection_concept]
# Affiliation network
## person x concept, substract-method and normalization, including duplicates
affil <- dna_network(conn,
networkType = "twomode",
statementType = "DNA Statement",
variable1 = "person",
variable2 = "concept",
qualifier = "agreement",
qualifierAggregation = "subtract",
normalization = "prominence",
duplicates = "document",
verbose = TRUE,
excludeValues = list(person = exclusion_person$value,
concept = exclusion_concept))
x <- t(afill)
x <- t(afil)
x <- t(affil)
y <- selection_person %>% filter(value %in% row.names(x))
selection_person
x <- t(affil)
y <- selection_person %>% filter(value %in% row.names(x))
x
y <- selection_person %>% filter(value %in% col.names(x))
x <- t(affil)
y <- selection_person %>% filter(value %in% col.names(x))
t(affil)
y <- selection_person %>% filter(value %in% colnames(x))
affil
colors <- as.character(t(affil))
colors <- colors[colors != "0"]
colors[colors < 0] <- "gray85"
colors[colors != "gray85"] <- "black"
set.edge.attribute(nw, "color", colors)
nw <- network(affil, bipartite = TRUE)
colors <- as.character(t(affil))
colors <- colors[colors != "0"]
colors[colors < 0] <- "gray85"
colors[colors != "gray85"] <- "black"
set.edge.attribute(nw, "color", colors)
pdf(file = "fig_network_affiliation.pdf",
width = 8,
height = 8)
plot(nw,
edge.col = get.edge.attribute(nw, "color"),
vertex.col = c(y$color,
rep("white", ncol(affil))),
displaylabels = TRUE,
label.cex = 0.5,
)
dev.off()
source("script_dna_010-workspace.R")
set.seed(19030023)
p_load(dplyr)
selection_person <- person %>% filter(frequency >9)
selection_person$value
exclusion_person <- person %>% filter(frequency < 10)
selection_concept <- c(1, 11, 12, 13)
concept$value[selection_concept]
exclusion_concept <- concept$value[-selection_concept]
# Affiliation network
## person x concept, substract-method and normalization, including duplicates
affil <- dna_network(conn,
networkType = "twomode",
statementType = "DNA Statement",
variable1 = "person",
variable2 = "concept",
qualifier = "agreement",
qualifierAggregation = "subtract",
normalization = "prominence",
duplicates = "document",
verbose = TRUE,
excludeValues = list(person = exclusion_person$value,
concept = exclusion_concept))
x <- t(affil)
y <- selection_person %>% filter(value %in% colnames(x))
nw <- network(affil, bipartite = TRUE)
colors <- as.character(t(affil))
colors <- colors[colors != "0"]
colors[colors < 0] <- "gray85"
colors[colors != "gray85"] <- "black"
set.edge.attribute(nw, "color", colors)
pdf(file = "fig_network_affiliation.pdf",
width = 8,
height = 8)
plot(nw,
edge.col = get.edge.attribute(nw, "color"),
vertex.col = c(y$color,
rep("white", ncol(affil))),
displaylabels = TRUE,
label.cex = 0.5,
)
dev.off()
plot(nw,
edge.col = get.edge.attribute(nw, "color"),
vertex.col = c(y$color,
rep("white", ncol(affil))),
displaylabels = TRUE,
label.cex = 0.5,
)
source("script_dna_010-workspace.R")
concepts_2002 <- dna_barplot(conn,
of = "concept", fontSize = 10,
stop.date = "01.01.2003")
concepts_2003 <- dna_barplot(conn,
of = "concept", fontSize = 10,
start.date = "01.01.2003")
pdf(file = "fig_barplot_concepts_2002.pdf",
width = 5,
height = 6)
concepts_2002
dev.off()
pdf(file = "fig_barplot_concepts_2003.pdf",
width = 5,
height = 6)
concepts_2003
dev.off()
set.seed(19030023)
p_load(dplyr)
selection_concept <- c(1, 11, 12, 13)
concept$value[selection_concept]
exclusion_concept <- concept$value[-selection_concept]
selection_person <- person %>% filter(frequency >5)
selection_person$value
exclusion_person <- person %>% filter(frequency < 6)
congruence_2002 <- dna_network(conn,
networkType = "onemode",
statementType = "DNA Statement",
variable1 = "person",
variable2 = "concept",
qualifier = "agreement",
qualifierAggregation = "congruence",
stop.date = "01.01.2003",
duplicates = "week",
excludeValues = list(person = exclusion_person$value,
concept = exclusion_concept))
nw_2002 <- network(congruence_2002)
x <- t(congruence_2002)
y <- selection_person %>% filter(value %in% row.names(x))
pdf(file = "fig_network_congruence_2002.pdf",
width = 8,
height = 8)
plot(nw_2002,
edge.lwd = congruence_2002,
displaylabels = TRUE,
label.cex = 0.5,
usearrows = FALSE,
edge.col = "gray85",
vertex.col = y$color,
label = y$value
)
dev.off()
congruence_2003 <- dna_network(conn,
networkType = "onemode",
statementType = "DNA Statement",
variable1 = "person",
variable2 = "concept",
qualifier = "agreement",
qualifierAggregation = "congruence",
start.date = "01.01.2003",
duplicates = "week",
excludeValues = list(person = exclusion_person$value,
concept = exclusion_concept))
nw_2003 <- network(congruence_2003)
x <- t(congruence_2003)
y <- selection_person %>% filter(value %in% row.names(x))
pdf(file = "fig_network_congruence_2003.pdf",
width = 8,
height = 8)
plot(nw_2003,
displaylabels = TRUE,
label.cex = 0.5,
usearrows = FALSE,
edge.col = "gray85",
vertex.col = y$color,
label = y$value
)
dev.off()
- 31 - alliance
- 32 - reintegration
- 33 - democracy
34 - stabilization
install.packages("rJava")
# package needed for installing R packages from Github
install.packages("remotes")
install.packages("remotes")
install.packages("remotes")
# installing rDNA package
remotes::install_github("leifeld/dna/rDNA@*release",
INSTALL_opts = "--no-multiarch")
# installing ggnet2 package
devtools::install_github("briatte/ggnet")
# package for loading R packages and installing them, if they are not already installed
install.packages("pacman")
concepts_2002 <- dna_barplot(conn,
of = "concept", fontSize = 10,
stop.date = "01.01.2003")
# loading dna
dna_init()
# loading required packages for using RStudio to analyze DNA
p_load(rDNA, statnet, GGally, ggnet, network, sna, ggplot2, dplyr)
# loading the "pacman" package for loading (p_load) packages and installing them,
## if they are not already installed
require(pacman)
# loading required packages for using RStudio to analyze DNA
p_load(rDNA, statnet, GGally, ggnet, network, sna, ggplot2, dplyr)
# loading dna
dna_init()
# connection to DNA-file
conn <- dna_connection("dna_example_UKIraqWar2003.dna", verbose = FALSE)
# read and save node attributes
organization <- dna_getAttributes(conn, variable = "organization")
person <- dna_getAttributes(conn, variable = "person")
concept <- dna_getAttributes(conn, variable = "concept")
concepts_2002 <- dna_barplot(conn,
of = "concept", fontSize = 10,
stop.date = "01.01.2003")
concepts_2002
concepts_2003 <- dna_barplot(conn,
of = "concept", fontSize = 10,
start.date = "01.01.2003")
concepts_2003
selection_person <- person %>% filter(frequency >9)
selection_person$value
exclusion_person <- person %>% filter(frequency < 10)
selection_concept <- c(1, 11, 12, 13)
concept$value[selection_concept]
exclusion_concept <- concept$value[-selection_concept]
# Affiliation network
## person x concept, substract-method and normalization, including duplicates
affil <- dna_network(conn,
networkType = "twomode",
statementType = "DNA Statement",
variable1 = "person",
variable2 = "concept",
qualifier = "agreement",
qualifierAggregation = "subtract",
normalization = "prominence",
duplicates = "document",
verbose = TRUE,
excludeValues = list(person = exclusion_person$value,
concept = exclusion_concept))
y <- selection_person %>% filter(value %in% colnames(x))
nw <- network(affil, bipartite = TRUE)
colors <- as.character(t(affil))
colors <- colors[colors != "0"]
colors[colors < 0] <- "gray85"
colors[colors != "gray85"] <- "black"
set.edge.attribute(nw, "color", colors)
plot(nw,
edge.col = get.edge.attribute(nw, "color"),
vertex.col = c(y$color,
rep("white", ncol(affil))),
displaylabels = TRUE,
label.cex = 0.5,
)
y <- selection_person %>% filter(value %in% colnames(x))
x <- t(affil)
y <- selection_person %>% filter(value %in% colnames(x))
nw <- network(affil, bipartite = TRUE)
colors <- as.character(t(affil))
colors <- colors[colors != "0"]
colors[colors < 0] <- "gray85"
colors[colors != "gray85"] <- "black"
set.edge.attribute(nw, "color", colors)
plot(nw,
edge.col = get.edge.attribute(nw, "color"),
vertex.col = c(y$color,
rep("white", ncol(affil))),
displaylabels = TRUE,
label.cex = 0.5,
)
